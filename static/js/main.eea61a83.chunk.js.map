{"version":3,"sources":["components/Header/Search/Search.module.css","components/Header/Search/SearchItem/SearchItem.module.scss","components/Header/Header.module.css","assets/tmdb_logo.svg","components/UI/Preloader/Preloader.module.css","assets/no-poster-available.jpg","redux/actions/app-actions.ts","api/api.ts","components/Header/Search/SearchItem/SearchItem.tsx","components/Header/Search/Search.tsx","redux/actions/search-actions.ts","hooks/useComponentVisible.ts","redux/actions/movies-actions.ts","components/Header/Search/SearchContainer.tsx","components/Header/Header.tsx","components/UI/Preloader/Preloader.tsx","components/MovieCard/MovieCard.tsx","components/MovieCard/MovieCardContainer.tsx","App.tsx","serviceWorker.ts","redux/movies-reducer.ts","redux/search-reducer.tsx","redux/app-reducer.ts","redux/store.ts","index.tsx","components/MovieCard/MovieCard.module.scss"],"names":["module","exports","APP_ACTIONS_TYPE","instance","axios","create","baseURL","params","api_key","movieAPI","movieId","lang","get","language","searchAPI","searchWord","query","page","getImgPath","path","size","SearchItem","movieListData","changeCurrentMovie","appLanguage","id","vote_average","release_date","original_title","title","movieTitle","useState","quickView","setQuickView","className","classes","searchItem","onClick","onMouseOver","onMouseLeave","poster_path","posterPath","QuickView","props","src","alt","SEARCH_ACTIONS_TYPE","Search","searchResults","changeCurrentMovieCard","changeSearchWord","initialIsVisible","isComponentVisible","setIsComponentVisible","ref","useRef","handleHideDropdown","event","key","handleClickOutside","current","contains","target","useEffect","document","addEventListener","removeEventListener","useComponentVisible","changeCurrentMovieCardHandler","useCallback","search","type","searchInput","onFocus","value","onChange","e","currentTarget","dropResults","resultsTable","results","sort","a","b","slice","map","movie","MOVIES_ACTIONS_TYPE","makeAction","payload","setSearchWordAC","SET_SEARCH_WORD","setSearchResultsAC","SET_SEARCH_RESULTS","setMovieDataAC","SET_MOVIE","setLoadingModeAC","SET_LOADING","setMovieIdAC","SET_MOVIE_ID","SearchContainer","React","memo","console","log","useSelector","state","currentMovieId","app","dispatch","useDispatch","dispatchStable","length","getState","then","res","data","catch","error","getSearchResultsTC","Header","changeLanguageHandler","dataset","CHANGE_APP_LANGUAGE","header","to","data-lang","Preloader","ldsFacebook","MovieCard","movieData","localization","genres","tagline","budget","revenue","overview","noPoster","movieCard","movieCard__row","movieCard__poster","movieCard__info","tableHeader","genre","name","join","movieCard__averageRate","style","backgroundColor","toFixed","MovieCardContainer","isLoading","getMovieDataTC","backdropURL","backdrop_path","backgroundImage","App","component","tmdbLogo","Boolean","window","location","hostname","match","initialState","reducers","combineReducers","action","imdb_id","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.eea61a83.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search\":\"Search_search__1pcFU\",\"searchInput\":\"Search_searchInput__qbYLk\",\"dropResults\":\"Search_dropResults__1Ibm5\",\"resultsTable\":\"Search_resultsTable__2vORt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchItem\":\"SearchItem_searchItem__2JIIt\",\"description\":\"SearchItem_description__11otg\",\"quickView\":\"SearchItem_quickView__1uRIK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1Y4h7\"};","module.exports = __webpack_public_path__ + \"static/media/tmdb_logo.31d26327.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsFacebook\":\"Preloader_ldsFacebook__1M1BE\"};","module.exports = __webpack_public_path__ + \"static/media/no-poster-available.e7d69c9b.jpg\";","import {AppLanguageType} from \"../app-reducer\";\r\n\r\nexport enum APP_ACTIONS_TYPE {\r\n    CHANGE_APP_LANGUAGE = \"App/CHANGE_APP_LANGUAGE\"\r\n}\r\n\r\n\r\nexport const changeAppLanguageAC = (language: AppLanguageType) => {\r\n    return {type: APP_ACTIONS_TYPE.CHANGE_APP_LANGUAGE, payload: {language}}\r\n}\r\n\r\nexport type AppActionsType = ReturnType<typeof changeAppLanguageAC>\r\n","import axios from \"axios\"\r\nimport {AppLanguageType} from \"../redux/app-reducer\";\r\n\r\n// API DOMAIN\r\nexport const API_URL = \"https://api.themoviedb.org/3\"\r\n// API NAME Get Trending By Week\r\nexport const API_NAME = \"/trending/all/week\"\r\n// API KEY For Security\r\nexport const API_KEY = \"5de81459140dd5d712d2ee9802f7b03d\"\r\nexport const IMAGE_DOMAIN_URL = \"https://image.tmdb.org/t/p/\"\r\n//EXAMPLE to get Movies List Hot Trends\r\n//https://api.themoviedb.org/3/trending/all/week?api_key=your_api_key\r\n\r\n\r\nlet instance = axios.create({\r\n    baseURL: API_URL,\r\n    params: {\r\n        api_key: API_KEY,\r\n    }\r\n})\r\n\r\nexport const movieAPI = {\r\n    getMovie(movieId: string | number | null, lang: AppLanguageType) {\r\n        return instance.get(`movie/${movieId}`, {\r\n            params: {\r\n                language: lang\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const searchAPI = {\r\n    getSearchResults(searchWord: string, lang: AppLanguageType){\r\n        return instance.get(`/search/movie`, {\r\n            params: {\r\n                language: lang,\r\n                query: searchWord,\r\n                page: \"1\",\r\n\r\n            }\r\n        })\r\n    }\r\n}\r\n\r\nexport const testAPI = {\r\n    getCards() {\r\n        return axios.get(\"https://api.pokemontcg.io/v1/cards\")\r\n    }\r\n}\r\n\r\n\r\n\r\n//additional functions\r\n\r\nexport type imgSizeType = \"w780\" | \"w342\" | \"w92\"\r\n\r\nexport const getImgPath = (path: string | null, size: imgSizeType): string => {\r\n    return `${IMAGE_DOMAIN_URL}${size}/${path}`\r\n}\r\n","import React, {useState} from 'react';\r\nimport classes from \"./SearchItem.module.scss\";\r\nimport {MovieListResultType} from \"../../../../types/types\";\r\nimport {getImgPath} from \"../../../../api/api\";\r\nimport {AppLanguageType} from \"../../../../redux/app-reducer\";\r\nimport {MovieIdType} from \"../../../../redux/movies-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    movieListData: MovieListResultType\r\n    changeCurrentMovie: (movieId: MovieIdType) => void\r\n    appLanguage: AppLanguageType\r\n}\r\n\r\nconst SearchItem: React.FC<PropsType> = ({movieListData, changeCurrentMovie, appLanguage}) => {\r\n\r\n    const {id, release_date, vote_average, original_title, title} = movieListData\r\n    let movieTitle = appLanguage === \"en-EN\" ? original_title : title\r\n    let [quickView, setQuickView] = useState(false)\r\n\r\n    const onClickHandler = () => {\r\n        changeCurrentMovie(id)\r\n    }\r\n\r\n    return (\r\n        <tr className={classes.searchItem} onClick={onClickHandler} onMouseOver={() => setQuickView(true)}\r\n             onMouseLeave={() => setQuickView(false)}>\r\n            {/*<div className={classes.description}>*/}\r\n            {/*    <div>{movieTitle}</div>*/}\r\n            {/*    <div>{vote_average} ({release_date})</div>*/}\r\n            {/*</div>*/}\r\n                <th>{movieTitle}</th>\r\n                <td>{vote_average}</td>\r\n            {movieListData.poster_path && quickView && <QuickView posterPath={movieListData.poster_path}/>}\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default SearchItem;\r\n\r\n\r\ntype QuickViewPropsType = {\r\n    posterPath: string | null\r\n}\r\n\r\nconst QuickView: React.FC<QuickViewPropsType> = (props) => {\r\n    return (\r\n        <div className={classes.quickView}>\r\n            <img src={getImgPath(props.posterPath, \"w92\")} alt=\"\"/>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useCallback} from 'react';\r\nimport classes from \"./Search.module.css\";\r\nimport SearchItem from \"./SearchItem/SearchItem\";\r\nimport useComponentVisible from '../../../hooks/useComponentVisible';\r\nimport {AppLanguageType} from \"../../../redux/app-reducer\";\r\nimport {SearchMoviesResultType} from \"../../../types/types\";\r\nimport {MovieIdType} from \"../../../redux/movies-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    searchResults: SearchMoviesResultType | null\r\n    language: AppLanguageType\r\n    searchWord: string\r\n    changeCurrentMovieCard: (movieId: MovieIdType) => void\r\n    changeSearchWord: (searchWord: string) => void\r\n}\r\n\r\nconst Search: React.FC<PropsType> = ({language, searchResults, searchWord, changeCurrentMovieCard, changeSearchWord}) => {\r\n\r\n    const {ref, isComponentVisible, setIsComponentVisible} = useComponentVisible(false);\r\n\r\n    const onFocus = () => {\r\n        setIsComponentVisible(true)\r\n    }\r\n    const changeCurrentMovieCardHandler = useCallback((movieId: MovieIdType) => {\r\n        changeCurrentMovieCard(movieId)\r\n        setIsComponentVisible(false)\r\n    }, [changeCurrentMovieCard])\r\n\r\n    return (\r\n        <div className={classes.search} ref={ref}>\r\n            <input type=\"text\"\r\n                   className={classes.searchInput}\r\n                   onFocus={onFocus}\r\n                   value={searchWord}\r\n                   onChange={(e) => changeSearchWord(e.currentTarget.value)}\r\n            />\r\n            {isComponentVisible &&\r\n            <div className={classes.dropResults}>\r\n                <table className={classes.resultsTable}>\r\n                    <tbody>\r\n                    {searchResults?.results\r\n                        .sort((a, b) => b.vote_average - a.vote_average)\r\n                        .slice(0, 8)\r\n                        .map(movie =>\r\n                            <SearchItem\r\n                                changeCurrentMovie={changeCurrentMovieCardHandler}\r\n                                movieListData={movie}\r\n                                key={movie.id}\r\n                                appLanguage={language}\r\n                            />)}\r\n                    </tbody>\r\n                </table>\r\n\r\n            </div>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;\r\n","import {searchAPI} from \"../../api/api\";\r\nimport {SearchMoviesResultType} from \"../../types/types\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {RootStateType} from \"../store\";\r\n\r\nexport enum SEARCH_ACTIONS_TYPE {\r\n    SET_SEARCH_WORD = \"SET_SEARCH_WORD\",\r\n    SET_SEARCH_RESULTS = \"SET_SEARCH_RESULTS\",\r\n}\r\n\r\nconst makeAction = <T extends SEARCH_ACTIONS_TYPE, P>(type: T) => (payload: P) => ({type, payload})\r\n\r\ninterface IStringMap<T> {\r\n    [key: string]: T\r\n}\r\n\r\ntype IAnyFunction = (...args: any[]) => any;\r\n\r\ntype IActionUnion<A extends IStringMap<IAnyFunction>> = ReturnType<A[keyof A]>;\r\n\r\n//                  ACTIONS\r\n\r\ntype SetSearchWordPayloadType = {\r\n    searchWord: string\r\n}\r\nexport const setSearchWordAC = makeAction<SEARCH_ACTIONS_TYPE.SET_SEARCH_WORD, SetSearchWordPayloadType>(SEARCH_ACTIONS_TYPE.SET_SEARCH_WORD)\r\n\r\ntype SetSearchResultsPayloadType = SearchMoviesResultType\r\nexport const setSearchResultsAC = makeAction<SEARCH_ACTIONS_TYPE.SET_SEARCH_RESULTS, SetSearchResultsPayloadType>(SEARCH_ACTIONS_TYPE.SET_SEARCH_RESULTS)\r\n\r\n\r\n//                  THUNKS\r\n\r\ntype ThunkType = ThunkAction<void, RootStateType, unknown, SearchActionsTypes>\r\n\r\nexport const getSearchResultsTC = (searchWord: string): ThunkType => (dispatch, getState) => {\r\n    console.log(getState().app.language)\r\n    searchAPI.getSearchResults(searchWord, getState().app.language)\r\n        .then(res => {\r\n            dispatch(setSearchResultsAC(res.data))\r\n        }).catch(error => console.log(error))\r\n}\r\n\r\n\r\nconst SearchActions = {\r\n    setSearchWordAC,\r\n    setSearchResultsAC,\r\n}\r\nexport type SearchActionsTypes = IActionUnion<typeof SearchActions>\r\n\r\n","import { useState, useEffect, useRef } from 'react';\r\n\r\nexport default function useComponentVisible(initialIsVisible: boolean) {\r\n    const [isComponentVisible, setIsComponentVisible] = useState(initialIsVisible);\r\n    const ref = useRef<HTMLDivElement>(null);\r\n\r\n    const handleHideDropdown = (event: KeyboardEvent) => {\r\n        if (event.key === 'Escape') {\r\n            setIsComponentVisible(false);\r\n        }\r\n    };\r\n\r\n    const handleClickOutside = (event: Event) => {\r\n        if (ref.current && !ref.current.contains(event.target as Node)) {\r\n            setIsComponentVisible(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keydown', handleHideDropdown, true);\r\n        document.addEventListener('click', handleClickOutside, true);\r\n        return () => {\r\n            document.removeEventListener('keydown', handleHideDropdown, true);\r\n            document.removeEventListener('click', handleClickOutside, true);\r\n        };\r\n    });\r\n\r\n    return { ref, isComponentVisible, setIsComponentVisible };\r\n}\r\n","import {ThunkAction} from \"redux-thunk\";\r\nimport {movieAPI} from \"../../api/api\";\r\nimport {MovieIdType, MoviesStateType} from \"../movies-reducer\";\r\nimport {MovieFullDataType} from \"../../types/types\";\r\nimport {RootStateType} from \"../store\";\r\n\r\n\r\nexport enum MOVIES_ACTIONS_TYPE {\r\n    SET_MOVIE = \"SET_MOVIE\",\r\n    SET_LOADING = \"SET_LOADING\",\r\n    SET_MOVIE_ID = \"SET_MOVIE_ID\",\r\n}\r\n\r\nconst makeAction = <T extends MOVIES_ACTIONS_TYPE, P>(type: T) => (payload: P) => ({type, payload})\r\n\r\ninterface IStringMap<T> {\r\n    [key: string]: T\r\n}\r\n\r\ntype IAnyFunction = (...args: any[]) => any;\r\n\r\ntype IActionUnion<A extends IStringMap<IAnyFunction>> = ReturnType<A[keyof A]>;\r\n\r\n\r\ntype SetMovieDataPayloadType = { movieData: MovieFullDataType }\r\nexport const setMovieDataAC = makeAction<MOVIES_ACTIONS_TYPE.SET_MOVIE, SetMovieDataPayloadType>(MOVIES_ACTIONS_TYPE.SET_MOVIE)\r\n\r\ntype SetLoadingModePayloadType = { isLoading: boolean }\r\nexport const setLoadingModeAC = makeAction<MOVIES_ACTIONS_TYPE.SET_LOADING, SetLoadingModePayloadType>(MOVIES_ACTIONS_TYPE.SET_LOADING)\r\n\r\ntype SetMovieIdPayloadType = { movieId: MovieIdType }\r\nexport const setMovieIdAC = makeAction<MOVIES_ACTIONS_TYPE.SET_MOVIE_ID, SetMovieIdPayloadType>(MOVIES_ACTIONS_TYPE.SET_MOVIE_ID)\r\n\r\n// THUNKS\r\n\r\ntype ThunkType = ThunkAction<void, RootStateType, unknown, MoviesActionTypes>\r\n\r\nexport const getMovieDataTC = (movieId: string | number | null): ThunkType => (dispatch, getState) => {\r\n    dispatch(setLoadingModeAC({isLoading: true}))\r\n    movieAPI.getMovie(movieId, getState().app.language)\r\n        .then(res => {\r\n            dispatch(setMovieDataAC({movieData: res.data}))\r\n            dispatch(setLoadingModeAC({isLoading: false}))\r\n        }).catch(error => console.log(error))\r\n}\r\n\r\n\r\n\r\nconst MoviesActions = {\r\n    setMovieDataAC,\r\n    setLoadingModeAC,\r\n    setMovieIdAC\r\n}\r\nexport type MoviesActionTypes = IActionUnion<typeof MoviesActions>\r\n\r\n","import React, {useCallback, useEffect} from 'react';\r\nimport Search from \"./Search\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/store\";\r\nimport {AppLanguageType} from \"../../../redux/app-reducer\";\r\nimport {getSearchResultsTC, setSearchWordAC} from \"../../../redux/actions/search-actions\";\r\nimport {setMovieIdAC} from \"../../../redux/actions/movies-actions\";\r\nimport { MovieIdType } from '../../../redux/movies-reducer';\r\nimport {SearchMoviesResultType} from \"../../../types/types\";\r\n\r\nconst SearchContainer = React.memo(() => {\r\n    console.log(\"search container\")\r\n    const searchWord = useSelector<RootStateType, string>(state => state.search.searchWord)\r\n    const searchResults = useSelector<RootStateType, SearchMoviesResultType | null>(state => state.search.searchResults)\r\n    const currentMovieId = useSelector<RootStateType, MovieIdType>(state => state.movie.movieId)\r\n    const language = useSelector<RootStateType, AppLanguageType>(state => state.app.language)\r\n    const dispatch = useDispatch()\r\n    const dispatchStable = useCallback(dispatch, [])\r\n\r\n    const changeSearchWord = useCallback((searchWord: string) => {\r\n        dispatchStable(setSearchWordAC({searchWord}))\r\n    }, [])\r\n\r\n    const changeCurrentMovieCard = useCallback((movieId: MovieIdType) => {\r\n        if (currentMovieId !== movieId) {\r\n            dispatchStable(setMovieIdAC({movieId}))\r\n        }\r\n    },[currentMovieId])\r\n\r\n    useEffect(() => {\r\n        if (searchWord.length >= 3) {\r\n            dispatchStable(getSearchResultsTC(searchWord))\r\n        }\r\n    }, [searchWord, language])\r\n\r\n    return (\r\n        <Search language={language}\r\n                searchResults={searchResults}\r\n                searchWord={searchWord}\r\n                changeCurrentMovieCard={changeCurrentMovieCard}\r\n                changeSearchWord={changeSearchWord}\r\n        />\r\n    );\r\n})\r\n\r\nexport default SearchContainer;\r\n","import React from 'react';\r\nimport classes from \"./Header.module.css\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {changeAppLanguageAC} from \"../../redux/actions/app-actions\";\r\nimport {AppLanguageType} from \"../../redux/app-reducer\";\r\nimport SearchContainer from './Search/SearchContainer';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Header = React.memo(() => {\r\n    console.log(\"header render\")\r\n    const dispatch = useDispatch()\r\n\r\n    const changeLanguageHandler = (e: React.MouseEvent<HTMLButtonElement>) => {\r\n        dispatch(changeAppLanguageAC(e.currentTarget.dataset.lang as AppLanguageType))\r\n    }\r\n\r\n    return (\r\n        <header className={classes.header}>\r\n            <nav>\r\n                <NavLink to={\"/calendar\"} title={\"Calendar\"} />\r\n            </nav>\r\n            <SearchContainer/>\r\n\r\n            <div>\r\n                <button data-lang={\"ru-RU\"} onClick={changeLanguageHandler}>RU</button>\r\n                <button data-lang={\"en-EN\"} onClick={changeLanguageHandler}>EN</button>\r\n            </div>\r\n        </header>\r\n    );\r\n})\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport classes from \"./Preloader.module.css\";\r\n\r\nexport function Preloader() {\r\n    return (\r\n        <div className={classes.ldsFacebook}>\r\n            <div></div><div></div><div></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport classes from './MovieCard.module.scss'\r\nimport {getImgPath} from \"../../api/api\";\r\nimport {MovieFullDataType} from \"../../types/types\";\r\nimport {Preloader} from \"../UI/Preloader/Preloader\";\r\nimport {AppLanguageType} from \"../../redux/app-reducer\";\r\nimport noPoster from \"../../assets/no-poster-available.jpg\"\r\n\r\ntype PropsType = {\r\n    movieData: MovieFullDataType | null\r\n    language: AppLanguageType\r\n}\r\n\r\nconst MovieCard = React.memo(({movieData, language}: PropsType) => {\r\n    console.log(\"movie card\")\r\n    const enLang = {\r\n        release_date: \"Release date:\",\r\n        genres: \"Genres:\",\r\n        tagline: \"Tagline:\",\r\n        budget: \"Budget:\",\r\n        revenue: \"Revenue:\",\r\n        overview: \"Overview:\",\r\n        vote_average: \"Vote average:\"\r\n    }\r\n\r\n    const ruLang = {\r\n        release_date: \"Дата релиза:\",\r\n        genres: \"Жанры:\",\r\n        tagline: \"Девиз:\",\r\n        budget: \"Бюджет:\",\r\n        revenue: \"Сборы:\",\r\n        overview: \"Описание:\",\r\n        vote_average: \"Средняя оценка:\"\r\n    }\r\n\r\n    let localization = language === \"en-EN\" ? enLang : ruLang\r\n\r\n    if (!movieData) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    let posterPath = movieData.poster_path ? getImgPath(movieData.poster_path, \"w342\") : noPoster\r\n\r\n    return (\r\n        <div className={classes.movieCard}>\r\n            <div className={classes.movieCard__row}>\r\n                <div className={classes.movieCard__poster}>\r\n                    <img src={posterPath} alt=\"\"/>\r\n                </div>\r\n                <div className={classes.movieCard__info}>\r\n                    {/*<h2>{movieData.original_title}</h2>*/}\r\n                    <h3>{movieData.title}</h3>\r\n                    <table>\r\n                        <tbody>\r\n                        <tr>\r\n                            <th className={classes.tableHeader}>{localization.release_date}</th>\r\n                            <td>{movieData.release_date}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{localization.genres}</th>\r\n                            <td>{movieData.genres.map((genre) => genre.name).join(\", \")}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{localization.tagline}</th>\r\n                            <td>{movieData.tagline}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{localization.budget}</th>\r\n                            <td>${movieData.budget}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{localization.revenue}</th>\r\n                            <td>${movieData.revenue}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <th>{localization.overview}</th>\r\n                            <td>{movieData.overview}</td>\r\n                        </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className={classes.movieCard__averageRate}\r\n                     style={{backgroundColor: `hsl(${movieData.vote_average*10}, 100%, 50%)`}}>\r\n                    {movieData.vote_average.toFixed(1)}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MovieCard;\r\n","import React, {useEffect} from 'react';\r\nimport {Preloader} from \"../UI/Preloader/Preloader\";\r\nimport MovieCard from \"./MovieCard\";\r\nimport {getMovieDataTC} from \"../../redux/actions/movies-actions\";\r\nimport {getImgPath} from \"../../api/api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../../redux/store\";\r\nimport {MovieIdType} from \"../../redux/movies-reducer\";\r\nimport {AppLanguageType} from \"../../redux/app-reducer\";\r\nimport { MovieFullDataType } from '../../types/types';\r\n\r\nconst MovieCardContainer = React.memo(() => {\r\n\r\n    console.log(\"movie card container\")\r\n\r\n    const dispatch = useDispatch()\r\n    const movieId = useSelector<RootStateType, MovieIdType>(state => state.movie.movieId)\r\n    const isLoading = useSelector<RootStateType, boolean>(state => state.movie.isLoading)\r\n    const movieData = useSelector<RootStateType, MovieFullDataType | null>(state => state.movie.movieData)\r\n    const lang = useSelector<RootStateType, AppLanguageType>(state => state.app.language)\r\n\r\n    useEffect(() => {\r\n        dispatch(getMovieDataTC(movieId))\r\n    }, [movieId, lang]);\r\n    let backdropURL = \"\";\r\n    if (movieData) backdropURL = getImgPath(movieData.backdrop_path, \"w780\")\r\n\r\n    return (\r\n        <div className={\"movieCardContainer\"} style={{backgroundImage: `url(${backdropURL})`}}>\r\n            {isLoading\r\n                ? <Preloader/>\r\n                : <MovieCard movieData={movieData} language={lang}/>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MovieCardContainer;\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport Header from \"./components/Header/Header\";\r\nimport tmdbLogo from \"./assets/tmdb_logo.svg\";\r\nimport MovieCardContainer from './components/MovieCard/MovieCardContainer';\r\nimport {Route, Switch } from 'react-router-dom';\r\n\r\nfunction App() {\r\n    console.log(\"app render\")\r\n\r\n    return (\r\n        <div className=\"App\" >\r\n            <Header/>\r\n            <main>\r\n                <Switch>\r\n                   <Route path={\"/\"} component={MovieCardContainer}/>\r\n                   <Route path={\"/calendar\"} component={MovieCardContainer}/>\r\n                </Switch>\r\n            </main>\r\n            <footer>\r\n                <img src={tmdbLogo} className={\"TMDB-logo\"} alt=\"tmdbLogo\"/>\r\n            </footer>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { MoviesActionTypes } from \"./actions/movies-actions\"\r\nimport {MovieFullDataType} from \"../types/types\";\r\nimport {MOVIES_ACTIONS_TYPE} from \"./actions/movies-actions\";\r\n\r\nexport type MovieIdType = string | number | null\r\n\r\nexport interface MoviesStateType {\r\n    movieId: MovieIdType\r\n    movieData: MovieFullDataType | null\r\n    isLoading: boolean\r\n}\r\n\r\nconst initialState: MoviesStateType = {\r\n    movieId: \"tt0816692\",\r\n    movieData: null,\r\n    isLoading: false\r\n}\r\n\r\n\r\nexport const moviesReducer = (state = initialState, action: MoviesActionTypes): MoviesStateType => {\r\n    switch (action.type) {\r\n        case MOVIES_ACTIONS_TYPE.SET_MOVIE: {\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n                movieId: action.payload.movieData.imdb_id\r\n            }\r\n        }\r\n        case MOVIES_ACTIONS_TYPE.SET_LOADING: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case MOVIES_ACTIONS_TYPE.SET_MOVIE_ID: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\n\r\n","import { SearchMoviesResultType } from \"../types/types\";\r\nimport {SEARCH_ACTIONS_TYPE, SearchActionsTypes} from \"./actions/search-actions\";\r\n\r\nexport interface SearchStateType {\r\n    searchWord: string\r\n    searchResults: SearchMoviesResultType | null\r\n}\r\n\r\nconst initialState: SearchStateType = {\r\n    searchWord: \"\",\r\n    searchResults: null,\r\n}\r\n\r\nexport const searchReducer = (state = initialState, action: SearchActionsTypes): SearchStateType => {\r\n    switch (action.type) {\r\n        case SEARCH_ACTIONS_TYPE.SET_SEARCH_WORD: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n        case SEARCH_ACTIONS_TYPE.SET_SEARCH_RESULTS: {\r\n            return {\r\n                ...state,\r\n                searchResults: {...action.payload},\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import { AppActionsType, APP_ACTIONS_TYPE } from \"./actions/app-actions\";\r\n\r\ntype AppStateType = typeof initialState\r\n\r\nexport type AppLanguageType = \"en-EN\" | \"ru-RU\"\r\n\r\nconst initialState = {\r\n    language: \"en-EN\" as AppLanguageType,\r\n}\r\n\r\nexport const appReducer = (state = initialState, action: AppActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case APP_ACTIONS_TYPE.CHANGE_APP_LANGUAGE: {\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {moviesReducer} from \"./movies-reducer\";\r\nimport {searchReducer} from \"./search-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\"\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\n\r\nconst reducers = combineReducers({\r\n    movie: moviesReducer,\r\n    search: searchReducer,\r\n    app: appReducer,\r\n})\r\n\r\n\r\nexport type RootStateType = ReturnType<typeof reducers>\r\n\r\nlet store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\n\r\nexport default store;\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from \"react-redux\";\r\nimport store from \"./redux/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <BrowserRouter>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </BrowserRouter>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movieCard\":\"MovieCard_movieCard__10HkD\",\"movieCard__row\":\"MovieCard_movieCard__row__3IlIh\",\"movieCard__poster\":\"MovieCard_movieCard__poster__1y9iN\",\"movieCard__info\":\"MovieCard_movieCard__info__3i1g8\",\"movieCard__averageRate\":\"MovieCard_movieCard__averageRate__3rsyj\"};"],"sourceRoot":""}